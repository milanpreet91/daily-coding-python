class MyHashSet:
    def __init__(self):
        self.capacity = 16
        self.data = [None] * self.capacity
        self.size = 0
        
    def rehash(self):
        new_arr = [k for k in self.data]
        self.capacity = 2 * self.capacity
        self.data = [None] * self.capacity
        for key in new_arr:
            self.add(key)

    def add(self, key: int) -> None:
        h = hash(key)
        hash_index = h % self.capacity
        if self.contains(key):
            return
        while self.data[hash_index]:
            hash_index += 1  
            if hash_index == self.capacity:
                self.rehash()    
        self.data[hash_index] = key

    def remove(self, key: int) -> None:
        h = hash(key)
        hash_index = h % self.capacity
        while hash_index < self.capacity and self.data[hash_index] != key:
            hash_index += 1
        if hash_index == self.capacity:
            return
        self.data[hash_index] = None

    def contains(self, key: int) -> bool:
        h = hash(key)
        hash_index = h % self.capacity
        while hash_index < self.capacity and self.data[hash_index] != key:
            hash_index += 1
        
        if hash_index == self.capacity:
            return False
        return True


# Your MyHashSet object will be instantiated and called as such:
# obj = MyHashSet()
# obj.add(key)
# obj.remove(key)
# param_3 = obj.contains(key)
