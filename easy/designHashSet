###############################################################3
#HashSet set Linear Probing as collision strategy
###############################################################

class MyHashSet:
    def __init__(self):
        self.capacity = 16
        self.data = [None] * self.capacity
        self.size = 0
        
    def rehash(self):
        new_arr = [k for k in self.data]
        self.capacity = 2 * self.capacity
        self.data = [None] * self.capacity
        for key in new_arr:
            self.add(key)

    def add(self, key: int) -> None:
        h = hash(key)
        hash_index = h % self.capacity
        if self.contains(key):
            return
        while self.data[hash_index]:
            hash_index += 1  
            if hash_index == self.capacity:
                self.rehash()    
        self.data[hash_index] = key

    def remove(self, key: int) -> None:
        h = hash(key)
        hash_index = h % self.capacity
        while hash_index < self.capacity and self.data[hash_index] != key:
            hash_index += 1
        if hash_index == self.capacity:
            return
        self.data[hash_index] = None

    def contains(self, key: int) -> bool:
        h = hash(key)
        hash_index = h % self.capacity
        while hash_index < self.capacity and self.data[hash_index] != key:
            hash_index += 1
        
        if hash_index == self.capacity:
            return False
        return True

############################################################
# HashSet using chaining as colliosion stratgey
# Without rehashing
############################################################

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class LinkedList:
    def __init__(self):
        self.head = None

    def isEmpty(self):
        return self.head == None

    def append(self, key: int) -> None:
        if self.contains(key):
            return
        new_node = Node(key)
        if not self.head:
            self.head = new_node
            return
        new_node.next = self.head
        self.head = new_node
    
    def contains(self, key: int) -> bool:
        if not self.head:
            return False
        ref = self.head
        while ref:
            if ref.data == key:
                return True
            ref = ref.next
        return False

    def remove(self, key: int) -> None:
        if not self.head:
            return            

        if self.head.data == key:
            temp = self.head
            self.head = self.head.next
            temp = None
            return
            
        ref = self.head
        while ref.next:
            if ref.next.data == key:
                ref.next = ref.next.next
                return
            ref = ref.next

class MyHashSet:
    def __init__(self):
        self.capacity = 10**2
        self.data = [LinkedList() for _ in range(self.capacity)]
        
    
    def add(self, key: int) -> None:
        h = hash(key)
        hash_index = h % len(self.data)
        self.data[hash_index].append(key)
            
    def contains(self, key: int) -> bool:
        h = hash(key)
        hash_index = h % len(self.data)
        return self.data[hash_index].contains(key)

    def remove(self, key: int) -> None:
        h = hash(key)
        hash_index = h % len(self.data)
        self.data[hash_index].remove(key)
####################################################################
# Your MyHashSet object will be instantiated and called as such:
# obj = MyHashSet()
# obj.add(key)
# obj.remove(key)
# param_3 = obj.contains(key)
#######################################################################
