class MyHashSet:
    def __init__(self):
        self.capacity = 16
        self.data = [None] * self.capacity

    def add(self, key: int) -> None:
        h = hash(key)
        hash_index = h % self.size
        bucket = self.data[hash_index]
        while self.data[hash_index]:
            hash_index = (h+1) % self.size  
        self.data[hash_index] = key

    def remove(self, key: int) -> None:
        h = hash(key)
        hash_index = h % self.size
        arr = self.data[hash_index]
        if key in self.data:
            self.data.remove(key)

    def contains(self, key: int) -> bool:
        hash_index = hash(key) % self.size
        arr = self.buckets[hash_index]
        return key in self.data


# Your MyHashSet object will be instantiated and called as such:
# obj = MyHashSet()
# obj.add(key)
# obj.remove(key)
# param_3 = obj.contains(key)
